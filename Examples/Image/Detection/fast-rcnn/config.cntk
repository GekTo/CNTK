RootDir = "."

ConfigDir = "$RootDir$"
DataDir = "$RootDir$"
OutputDir = "$RootDir$/Output"
ModelDir = "$OutputDir$/Models"

ndlMacros="$ConfigDir$/Macros.ndl"

precision="float"
deviceId="Auto"

command=AddROILayer:Train

parallelTrain="false"

#stderr="$OutputDir$/AlexNet"
traceLevel=1
numMBsToShowResult=1 #500

AddROILayer=[    
    action="edit"
    CurModel="$ConfigDir$/AlexNet.89"
    NewModel="$ConfigDir$/AlexNet.rcnn.0"
    editPath="$ConfigDir$/AddROILayer.mel"
]

AddObjectSoftmax=[
    action="edit"
    CurModel="$ConfigDir$/AlexNet.ROI"
    NewModel="$ConfigDir$/AlexNet.new"
    editPath="$ConfigDir$/AddObjectSoftmax.mel"
]

ChangeInputSize=[    
    action="edit"
    CurModel="$ConfigDir$/AlexNet.ROI"
    NewModel="$ConfigDir$/AlexNet.big"
    editPath="$ConfigDir$/ChangeInputSize.mel"
]


Train=[
    action="train"

    modelPath="$ConfigDir$/AlexNet.rcnn"
    NDLNetworkBuilder=[
        networkDescription="$ConfigDir$/AlexNet-RCNN.ndl"
    ]
    
    SGD=[
        epochSize=0
        minibatchSize=8
        learningRatesPerMB=0.001*80:0.0001
        momentumPerMB=0.9
        maxEpochs=100
        gradUpdateType=None
        L2RegWeight=0.0005
        dropoutRate=0.5
        
        ParallelTrain=[
            parallelizationMethod="DataParallelSGD"
            distributedMBReading="true"
            parallelizationStartEpoch=1
            DataParallelSGD=[
                gradientBits=32
            ]
        ]
        
        numMBsToShowResult=5

    ]
    reader=[
        randomize = false
	verbosity = 2
	deserializers = (
	[
	    type = "CNTKTextFormatDeserializer"
	    module = "CNTKTextFormatReader"
	    file = "$ConfigDir$/trainval2012.rois.txt"
	    input = [
	        rois = [
		    dim = 8000
		    format = "dense"
		]
	    ]
	]:[
            type = "CNTKTextFormatDeserializer"
	    module = "CNTKTextFormatReader"
	    file = "$ConfigDir$/trainval2012.roilabels.txt"
	    input = [
	        roiLabels = [
		    dim = 42000
		    format = "dense"
		]
	    ]
	]:[
	    type = "ImageDeserializer"
	    module = "ImageReader"
	    file="$ConfigDir$/trainval2012.txt"
	    input = [
	        features = [
	        transforms = (
		    [
		        type = "Crop"
			cropType = "Center"
		    ]:[
                        type = "Scale"
                        width = 224
                        height = 224
                        channels = 3
                        # Interpolation to use when scaling image to width x height size.
                        interpolations = "linear"
                    ]:[
                        type = "Mean"
                        # Stores mean values for each pixel in OpenCV matrix XML format.
                        meanFile = "$ConfigDir$/ImageNet1K_mean.xml"
                    ]:[
                        # Changes the image layout from HWC to CHW
                        type = "Transpose"
                    ]
                )
		]
		ignored=[
            	    labelDim=1000
		]
	    ]
        ]
	)
    ]
]



Write=[
    action="write"
    modelPath="$ConfigDir$/AlexNet.big"
    # Set minibatch size for testing.
    minibatchSize=32
    outputPath="D:\planeGPU-big"
    reader=[
        randomize = false
	verbosity = 2
	deserializers = (
	[
	    type = "CNTKTextFormatDeserializer"
	    module = "CNTKTextFormatReader"
	    file = "$ConfigDir$/patrickplane.rois.txt"
	    input = [
	        rois = [
		    dim = 8000
		    format = "dense"
		]
	    ]
	]:
	[
	    type = "ImageDeserializer"
	    module = "ImageReader"
	    file="$ConfigDir$/plane.txt"
	    input = [
	        newFeatures = [
	        transforms = (
		    [
		        type = "Crop"
			cropType = "Center"
		    ]:[
                        type = "Scale"
                        width = 224
                        height = 224
                        channels = 3
                        # Interpolation to use when scaling image to width x height size.
                        interpolations = "linear"
                    ]:[
                        type = "Mean"
                        # Stores mean values for each pixel in OpenCV matrix XML format.
                        meanFile = "$ConfigDir$/ImageNet1K_mean.xml"
                    ]:[
                        type = "Scale"
                        width = 448
                        height = 448
                        channels = 3
                        # Interpolation to use when scaling image to width x height size.
                        interpolations = "linear"
                    ]:[
                        # Changes the image layout from HWC to CHW
                        type = "Transpose"
                    ]
                )
		]
		labels=[
            	    labelDim=1000
		]
	    ]
        ]
	)
    ]

    # outputNodeNames = (roi)
]
