CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2620 v3 @ 2.40GHz
    Hardware threads: 24
    Total Memory: 33476764 kB
-------------------------------------------------------------------
=== Running /cygdrive/c/repo/cntk_github/CNTK/x64/release/cntk.exe configFile=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data RunDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand OutputDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu DeviceId=-1 timestamping=true shareNodeValueMatrices=true
-------------------------------------------------------------------
Build info: 

		Built time: Aug  4 2016 16:49:17
		Last modified date: Thu Aug  4 12:49:29 2016
		Build type: Release
		Build target: GPU
		With 1bit-SGD: yes
		Math lib: acml
		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
		CUB_PATH: c:\Tools\cub-1.4.1\
		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
		Build Branch: eldak/mtNonUniform
		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c (modified)
		Built by eldak on ELDAK-0
		Build Path: c:\repo\cntk_github\CNTK\Source\CNTK\
-------------------------------------------------------------------
Changed current directory to C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
08/05/2016 11:55:20: -------------------------------------------------------------------
08/05/2016 11:55:20: Build info: 

08/05/2016 11:55:20: 		Built time: Aug  4 2016 16:49:17
08/05/2016 11:55:20: 		Last modified date: Thu Aug  4 12:49:29 2016
08/05/2016 11:55:20: 		Build type: Release
08/05/2016 11:55:20: 		Build target: GPU
08/05/2016 11:55:20: 		With 1bit-SGD: yes
08/05/2016 11:55:20: 		Math lib: acml
08/05/2016 11:55:20: 		CUDA_PATH: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v7.0
08/05/2016 11:55:20: 		CUB_PATH: c:\Tools\cub-1.4.1\
08/05/2016 11:55:20: 		CUDNN_PATH: c:\Tools\cudnn-4.0\cuda
08/05/2016 11:55:20: 		Build Branch: eldak/mtNonUniform
08/05/2016 11:55:20: 		Build SHA1: 0f61695dfc335f2406284d335678f57c215e6e9c (modified)
08/05/2016 11:55:20: 		Built by eldak on ELDAK-0
08/05/2016 11:55:20: 		Build Path: c:\repo\cntk_github\CNTK\Source\CNTK\
08/05/2016 11:55:20: -------------------------------------------------------------------
08/05/2016 11:55:21: -------------------------------------------------------------------
08/05/2016 11:55:21: GPU info:

08/05/2016 11:55:21: 		Device[0]: cores = 1536; computeCapability = 5.2; type = "GeForce GTX 960"; memory = 2048 MB
08/05/2016 11:55:21: 		Device[1]: cores = 576; computeCapability = 5.0; type = "Quadro K620"; memory = 2048 MB
08/05/2016 11:55:21: -------------------------------------------------------------------

08/05/2016 11:55:21: Running on ELDAK-0 at 2016/08/05 11:55:21
08/05/2016 11:55:21: Command line: 
C:\repo\cntk_github\CNTK\x64\release\cntk.exe  configFile=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand/cntk.cntk  currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data  RunDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu  DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data  ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand  OutputDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu  DeviceId=-1  timestamping=true  shareNodeValueMatrices=true



08/05/2016 11:55:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG (VARIABLES NOT RESOLVED) >>>>>>>>>>>>>>>>>>>>
08/05/2016 11:55:21: precision = "float"
command = speechTrain:write
deviceId = $DeviceId$
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    deviceId = $DeviceId$
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "$DataDir$/glob_0000.mlf"
            labelMappingFile = "$DataDir$/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "$RunDir$/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = $DeviceId$
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "$RunDir$/Output"
]
currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

08/05/2016 11:55:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG (VARIABLES NOT RESOLVED)  <<<<<<<<<<<<<<<<<<<<

08/05/2016 11:55:21: >>>>>>>>>>>>>>>>>>>> RAW CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
08/05/2016 11:55:21: precision = "float"
command = speechTrain:write
deviceId = -1
parallelTrain = false
makeMode = false
speechTrain = [
    action = "train"
    modelPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]
write = [
    action = write
    modelPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/Output"
]
currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
RunDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
OutputDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
DeviceId=-1
timestamping=true
shareNodeValueMatrices=true

08/05/2016 11:55:21: <<<<<<<<<<<<<<<<<<<< RAW CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<

08/05/2016 11:55:21: >>>>>>>>>>>>>>>>>>>> PROCESSED CONFIG WITH ALL VARIABLES RESOLVED >>>>>>>>>>>>>>>>>>>>
configparameters: cntk.cntk:command=speechTrain:write
configparameters: cntk.cntk:ConfigDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\DNN\WriteCommand
configparameters: cntk.cntk:currentDirectory=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:DataDir=C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data
configparameters: cntk.cntk:deviceId=-1
configparameters: cntk.cntk:makeMode=false
configparameters: cntk.cntk:OutputDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:parallelTrain=false
configparameters: cntk.cntk:precision=float
configparameters: cntk.cntk:RunDir=F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu
configparameters: cntk.cntk:shareNodeValueMatrices=true
configparameters: cntk.cntk:speechTrain=[
    action = "train"
    modelPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    deviceId = -1
    traceLevel = 1
    SimpleNetworkBuilder = [
        layerSizes = 363:512:512:132
        trainingCriterion = "CrossEntropyWithSoftmax"
        evalCriterion = "ErrorPrediction"
        layerTypes = "Sigmoid"
        applyMeanVarNorm = true
        initValueScale = 1.0
        uniformInit = true
        needPrior = true
    ]
    SGD = [
        epochSize = 20480
        minibatchSize = 64:256:1024
        learningRatesPerMB = 1.0:0.5:0.1
        numMBsToShowResult = 10
        momentumPerMB = 0.9:0.656119
        dropoutRate = 0.0
        maxEpochs = 3
        keepCheckPointFiles = true
        AutoAdjust = [
            reduceLearnRateIfImproveLessThan = 0
            loadBestModel = true
            increaseLearnRateIfImproveMoreThan = 1000000000
            learnRateDecreaseFactor = 0.5
            learnRateIncreaseFactor = 1.382
            autoAdjustLR = "adjustAfterEpoch"
        ]
        clippingThresholdPerSample = 1#INF
    ]
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.scp"
        ]
        labels = [
            mlfFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf"
            labelMappingFile = "C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list"
            labelDim = 132
            labelType = "category"
        ]
    ]
]

configparameters: cntk.cntk:timestamping=true
configparameters: cntk.cntk:write=[
    action = write
    modelPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn"
    outputNodeNames=ScaledLogLikelihood
    deviceId = -1
    traceLevel = 1
    printValues=true
    reader = [
        readerType = "HTKMLFReader"
        readMethod = "blockRandomize"
        miniBatchMode = "partial"
        randomize = "auto"
        verbosity = 0
        features = [
            dim = 363
            type = "real"
            scpFile = "glob_0000.write.scp"
        ]
    ]
    outputPath = "F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/Output"
]

08/05/2016 11:55:21: <<<<<<<<<<<<<<<<<<<< PROCESSED CONFIG WITH ALL VARIABLES RESOLVED <<<<<<<<<<<<<<<<<<<<
08/05/2016 11:55:21: Commands: speechTrain write
08/05/2016 11:55:21: Precision = "float"
08/05/2016 11:55:21: CNTKModelPath: F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn
08/05/2016 11:55:21: CNTKCommandTrainInfo: speechTrain : 3
08/05/2016 11:55:21: CNTKCommandTrainInfo: CNTKNoMoreCommands_Total : 3

08/05/2016 11:55:21: ##############################################################################
08/05/2016 11:55:21: #                                                                            #
08/05/2016 11:55:21: # Action "train"                                                             #
08/05/2016 11:55:21: #                                                                            #
08/05/2016 11:55:21: ##############################################################################

08/05/2016 11:55:21: CNTKCommandTrainBegin: speechTrain
SimpleNetworkBuilder Using CPU
reading script file glob_0000.scp ... 948 entries
total 132 state names in state list C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/state.list
htkmlfreader: reading MLF file C:\repo\cntk_github\CNTK\Tests\EndToEndTests\Speech\Data/glob_0000.mlf ... total 948 entries
...............................................................................................feature set 0: 252734 frames in 948 out of 948 utterances
label set 0: 129 classes
minibatchutterancesource: 948 utterances grouped into 3 chunks, av. chunk size: 316.0 utterances, 84244.7 frames
useParallelTrain option is not enabled. ParallelTrain config will be ignored.
08/05/2016 11:55:22: Creating virgin network.

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *]
Validating --> MeanOfFeatures = Mean (features) : [363 x *] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *], [363], [363] -> [363 x *]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *] -> [512 x *]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *] -> [512 x 1 x *]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *], [512 x 1] -> [512 x 1 x *]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *] -> [512 x 1 x *]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *] -> [132 x 1 x *]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *], [132 x 1] -> [132 x 1 x *]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *], [132 x 1 x *] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *] -> [132 x 1 x *]
Validating --> Prior = Mean (labels) : [132 x *] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *], [132] -> [132 x 1 x *]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.

08/05/2016 11:55:22: Created model with 25 nodes on CPU.

08/05/2016 11:55:22: Training criterion node(s):
08/05/2016 11:55:22: 	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax

08/05/2016 11:55:22: Evaluation criterion node(s):

08/05/2016 11:55:22: 	EvalErrorPrediction = ErrorPrediction


Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[EvalErrorPrediction Gradient[1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *]] [PosteriorProb Value[132 x 1 x *]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *]] [features Gradient[363 x *]] [labels Gradient[132 x *]] }
0000023AE5F4D610: {[features Value[363 x *]] }
0000023AE5F4D890: {[InvStdOfFeatures Value[363]] }
0000023AE5F4DF70: {[W0 Value[512 x 363]] }
0000023AE5F4E290: {[MeanOfFeatures Value[363]] }
0000023AEA660910: {[W1*H1+B1 Value[512 x 1 x *]] [W2*H1 Value[132 x 1 x *]] }
0000023AEA660A50: {[LogOfPrior Value[132]] }
0000023AEA660C30: {[W1 Gradient[512 x 512]] [W1*H1+B1 Gradient[512 x 1 x *]] [W2*H1 Gradient[132 x 1 x *]] }
0000023AEA660CD0: {[CrossEntropyWithSoftmax Gradient[1]] }
0000023AEA660FF0: {[B1 Gradient[512 x 1]] [H2 Gradient[512 x 1 x *]] [HLast Gradient[132 x 1 x *]] }
0000023AEA661130: {[W1 Value[512 x 512]] }
0000023AEA661450: {[H1 Value[512 x 1 x *]] [W0*features Gradient[512 x *]] [W0*features Value[512 x *]] }
0000023AEA661630: {[B0 Value[512 x 1]] }
0000023AEA661810: {[CrossEntropyWithSoftmax Value[1]] }
0000023AEA6618B0: {[labels Value[132 x *]] }
0000023AEA661A90: {[MVNormalizedFeatures Value[363 x *]] }
0000023AEA661BD0: {[EvalErrorPrediction Value[1]] }
0000023AEA661C70: {[ScaledLogLikelihood Value[132 x 1 x *]] }
0000023AEA661D10: {[B1 Value[512 x 1]] }
0000023AEA6620D0: {[Prior Value[132]] }
0000023AEA6622B0: {[H2 Value[512 x 1 x *]] [W0 Gradient[512 x 363]] [W0*features+B0 Gradient[512 x 1 x *]] [W0*features+B0 Value[512 x 1 x *]] [W1*H1 Gradient[512 x 1 x *]] [W1*H1 Value[512 x 1 x *]] }
0000023AEA662350: {[HLast Value[132 x 1 x *]] [W2 Gradient[132 x 512]] }
0000023AEA662530: {[W2 Value[132 x 512]] }
0000023AEA6625D0: {[B2 Value[132 x 1]] }
0000023AEA681170: {[B0 Gradient[512 x 1]] [H1 Gradient[512 x 1 x *]] }
0000023AEA681E90: {[B2 Gradient[132 x 1]] }


08/05/2016 11:55:22: Precomputing --> 3 PreCompute nodes found.

08/05/2016 11:55:22: 	MeanOfFeatures = Mean()
08/05/2016 11:55:22: 	InvStdOfFeatures = InvStdDev()
08/05/2016 11:55:22: 	Prior = Mean()
minibatchiterator: epoch 0: frames [0..252734] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses
requiredata: determined feature kind as 33-dimensional 'USER' with frame shift 10.0 ms

08/05/2016 11:55:24: Precomputing --> Completed.


08/05/2016 11:55:24: Starting Epoch 1: learning rate per sample = 0.015625  effective momentum = 0.900000  momentum as time constant = 607.4 samples
minibatchiterator: epoch 0: frames [0..20480] (first utterance at frame 0), data subset 0 of 1, with 1 datapasses

08/05/2016 11:55:24: Starting minibatch loop.
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[   1-  10, 3.13%]: CrossEntropyWithSoftmax = 4.56263580 * 640; EvalErrorPrediction = 0.94843750 * 640; time = 0.2194s; samplesPerSecond = 2916.7
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  11-  20, 6.25%]: CrossEntropyWithSoftmax = 4.27170792 * 640; EvalErrorPrediction = 0.90468750 * 640; time = 0.1153s; samplesPerSecond = 5552.1
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  21-  30, 9.38%]: CrossEntropyWithSoftmax = 4.01703873 * 640; EvalErrorPrediction = 0.87656250 * 640; time = 0.1051s; samplesPerSecond = 6090.1
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  31-  40, 12.50%]: CrossEntropyWithSoftmax = 3.90703430 * 640; EvalErrorPrediction = 0.87031250 * 640; time = 0.1070s; samplesPerSecond = 5980.0
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  41-  50, 15.63%]: CrossEntropyWithSoftmax = 3.74515076 * 640; EvalErrorPrediction = 0.84218750 * 640; time = 0.1156s; samplesPerSecond = 5537.1
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  51-  60, 18.75%]: CrossEntropyWithSoftmax = 3.78725433 * 640; EvalErrorPrediction = 0.87968750 * 640; time = 0.1035s; samplesPerSecond = 6181.1
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  61-  70, 21.88%]: CrossEntropyWithSoftmax = 3.57462311 * 640; EvalErrorPrediction = 0.84531250 * 640; time = 0.1072s; samplesPerSecond = 5969.9
08/05/2016 11:55:25:  Epoch[ 1 of 3]-Minibatch[  71-  80, 25.00%]: CrossEntropyWithSoftmax = 3.42511902 * 640; EvalErrorPrediction = 0.79531250 * 640; time = 0.1078s; samplesPerSecond = 5935.8
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[  81-  90, 28.13%]: CrossEntropyWithSoftmax = 3.47822266 * 640; EvalErrorPrediction = 0.82187500 * 640; time = 0.1393s; samplesPerSecond = 4594.7
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[  91- 100, 31.25%]: CrossEntropyWithSoftmax = 3.39348145 * 640; EvalErrorPrediction = 0.80000000 * 640; time = 0.1096s; samplesPerSecond = 5836.8
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 101- 110, 34.38%]: CrossEntropyWithSoftmax = 3.42996216 * 640; EvalErrorPrediction = 0.82656250 * 640; time = 0.1024s; samplesPerSecond = 6248.2
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 111- 120, 37.50%]: CrossEntropyWithSoftmax = 3.12568665 * 640; EvalErrorPrediction = 0.77656250 * 640; time = 0.1154s; samplesPerSecond = 5545.2
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 121- 130, 40.63%]: CrossEntropyWithSoftmax = 3.15167847 * 640; EvalErrorPrediction = 0.74218750 * 640; time = 0.1029s; samplesPerSecond = 6218.5
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 131- 140, 43.75%]: CrossEntropyWithSoftmax = 3.10856018 * 640; EvalErrorPrediction = 0.75468750 * 640; time = 0.1001s; samplesPerSecond = 6392.9
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 141- 150, 46.88%]: CrossEntropyWithSoftmax = 3.06774902 * 640; EvalErrorPrediction = 0.74375000 * 640; time = 0.1039s; samplesPerSecond = 6161.5
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 151- 160, 50.00%]: CrossEntropyWithSoftmax = 3.03466187 * 640; EvalErrorPrediction = 0.75625000 * 640; time = 0.0993s; samplesPerSecond = 6446.4
08/05/2016 11:55:26:  Epoch[ 1 of 3]-Minibatch[ 161- 170, 53.13%]: CrossEntropyWithSoftmax = 2.99031982 * 640; EvalErrorPrediction = 0.73437500 * 640; time = 0.1046s; samplesPerSecond = 6120.8
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 171- 180, 56.25%]: CrossEntropyWithSoftmax = 2.81797485 * 640; EvalErrorPrediction = 0.70625000 * 640; time = 0.1015s; samplesPerSecond = 6304.8
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 181- 190, 59.38%]: CrossEntropyWithSoftmax = 2.81869507 * 640; EvalErrorPrediction = 0.68593750 * 640; time = 0.1058s; samplesPerSecond = 6049.6
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 191- 200, 62.50%]: CrossEntropyWithSoftmax = 2.72915039 * 640; EvalErrorPrediction = 0.70156250 * 640; time = 0.1833s; samplesPerSecond = 3490.9
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 201- 210, 65.63%]: CrossEntropyWithSoftmax = 2.76341553 * 640; EvalErrorPrediction = 0.67968750 * 640; time = 0.1104s; samplesPerSecond = 5795.2
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 211- 220, 68.75%]: CrossEntropyWithSoftmax = 2.60383301 * 640; EvalErrorPrediction = 0.67187500 * 640; time = 0.1104s; samplesPerSecond = 5798.1
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 221- 230, 71.88%]: CrossEntropyWithSoftmax = 2.54118652 * 640; EvalErrorPrediction = 0.65156250 * 640; time = 0.1145s; samplesPerSecond = 5590.5
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 231- 240, 75.00%]: CrossEntropyWithSoftmax = 2.42796631 * 640; EvalErrorPrediction = 0.65156250 * 640; time = 0.1093s; samplesPerSecond = 5857.3
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 241- 250, 78.13%]: CrossEntropyWithSoftmax = 2.46162720 * 640; EvalErrorPrediction = 0.63906250 * 640; time = 0.1082s; samplesPerSecond = 5913.7
08/05/2016 11:55:27:  Epoch[ 1 of 3]-Minibatch[ 251- 260, 81.25%]: CrossEntropyWithSoftmax = 2.40245972 * 640; EvalErrorPrediction = 0.64062500 * 640; time = 0.1111s; samplesPerSecond = 5762.9
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 261- 270, 84.38%]: CrossEntropyWithSoftmax = 2.30971680 * 640; EvalErrorPrediction = 0.63593750 * 640; time = 0.1080s; samplesPerSecond = 5927.5
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 271- 280, 87.50%]: CrossEntropyWithSoftmax = 2.42456055 * 640; EvalErrorPrediction = 0.62500000 * 640; time = 0.1123s; samplesPerSecond = 5696.5
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 281- 290, 90.63%]: CrossEntropyWithSoftmax = 2.39641724 * 640; EvalErrorPrediction = 0.60781250 * 640; time = 0.1067s; samplesPerSecond = 6000.7
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 291- 300, 93.75%]: CrossEntropyWithSoftmax = 2.21619263 * 640; EvalErrorPrediction = 0.59375000 * 640; time = 0.1106s; samplesPerSecond = 5788.6
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 301- 310, 96.88%]: CrossEntropyWithSoftmax = 2.31751099 * 640; EvalErrorPrediction = 0.60937500 * 640; time = 0.1046s; samplesPerSecond = 6116.7
08/05/2016 11:55:28:  Epoch[ 1 of 3]-Minibatch[ 311- 320, 100.00%]: CrossEntropyWithSoftmax = 2.18952026 * 640; EvalErrorPrediction = 0.56718750 * 640; time = 0.1135s; samplesPerSecond = 5639.1
08/05/2016 11:55:28: Finished Epoch[ 1 of 3]: [Training] CrossEntropyWithSoftmax = 3.04659729 * 20480; EvalErrorPrediction = 0.73706055 * 20480; totalSamplesSeen = 20480; learningRatePerSample = 0.015625; epochTime=3.67162s
08/05/2016 11:55:28: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.1'

08/05/2016 11:55:28: Starting Epoch 2: learning rate per sample = 0.001953  effective momentum = 0.656119  momentum as time constant = 607.5 samples
minibatchiterator: epoch 1: frames [20480..40960] (first utterance at frame 20480), data subset 0 of 1, with 1 datapasses

08/05/2016 11:55:28: Starting minibatch loop.
08/05/2016 11:55:28:  Epoch[ 2 of 3]-Minibatch[   1-  10, 12.50%]: CrossEntropyWithSoftmax = 2.11101189 * 2560; EvalErrorPrediction = 0.57734375 * 2560; time = 0.2313s; samplesPerSecond = 11067.8
08/05/2016 11:55:29:  Epoch[ 2 of 3]-Minibatch[  11-  20, 25.00%]: CrossEntropyWithSoftmax = 2.08752899 * 2560; EvalErrorPrediction = 0.57148438 * 2560; time = 0.2378s; samplesPerSecond = 10766.1
08/05/2016 11:55:29:  Epoch[ 2 of 3]-Minibatch[  21-  30, 37.50%]: CrossEntropyWithSoftmax = 1.98162766 * 2560; EvalErrorPrediction = 0.54843750 * 2560; time = 0.2494s; samplesPerSecond = 10264.8
08/05/2016 11:55:29:  Epoch[ 2 of 3]-Minibatch[  31-  40, 50.00%]: CrossEntropyWithSoftmax = 2.01895256 * 2560; EvalErrorPrediction = 0.54218750 * 2560; time = 0.2296s; samplesPerSecond = 11150.5
08/05/2016 11:55:29:  Epoch[ 2 of 3]-Minibatch[  41-  50, 62.50%]: CrossEntropyWithSoftmax = 1.97025681 * 2560; EvalErrorPrediction = 0.53828125 * 2560; time = 0.2403s; samplesPerSecond = 10651.5
08/05/2016 11:55:30:  Epoch[ 2 of 3]-Minibatch[  51-  60, 75.00%]: CrossEntropyWithSoftmax = 1.93199768 * 2560; EvalErrorPrediction = 0.52460938 * 2560; time = 0.2397s; samplesPerSecond = 10681.0
08/05/2016 11:55:30:  Epoch[ 2 of 3]-Minibatch[  61-  70, 87.50%]: CrossEntropyWithSoftmax = 1.91190567 * 2560; EvalErrorPrediction = 0.53828125 * 2560; time = 0.2392s; samplesPerSecond = 10704.4
08/05/2016 11:55:30:  Epoch[ 2 of 3]-Minibatch[  71-  80, 100.00%]: CrossEntropyWithSoftmax = 1.94515076 * 2560; EvalErrorPrediction = 0.52226562 * 2560; time = 0.2417s; samplesPerSecond = 10592.1
08/05/2016 11:55:30: Finished Epoch[ 2 of 3]: [Training] CrossEntropyWithSoftmax = 1.99480400 * 20480; EvalErrorPrediction = 0.54536133 * 20480; totalSamplesSeen = 40960; learningRatePerSample = 0.001953125; epochTime=1.91081s
08/05/2016 11:55:30: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn.2'

08/05/2016 11:55:30: Starting Epoch 3: learning rate per sample = 0.000098  effective momentum = 0.656119  momentum as time constant = 2429.9 samples
minibatchiterator: epoch 2: frames [40960..61440] (first utterance at frame 40960), data subset 0 of 1, with 1 datapasses

08/05/2016 11:55:30: Starting minibatch loop.
08/05/2016 11:55:31:  Epoch[ 3 of 3]-Minibatch[   1-  10, 50.00%]: CrossEntropyWithSoftmax = 1.91278725 * 10240; EvalErrorPrediction = 0.52451172 * 10240; time = 0.7036s; samplesPerSecond = 14554.0
08/05/2016 11:55:32:  Epoch[ 3 of 3]-Minibatch[  11-  20, 100.00%]: CrossEntropyWithSoftmax = 1.92157784 * 10240; EvalErrorPrediction = 0.53515625 * 10240; time = 0.6615s; samplesPerSecond = 15480.0
08/05/2016 11:55:32: Finished Epoch[ 3 of 3]: [Training] CrossEntropyWithSoftmax = 1.91718254 * 20480; EvalErrorPrediction = 0.52983398 * 20480; totalSamplesSeen = 61440; learningRatePerSample = 9.7656251e-005; epochTime=1.37001s
08/05/2016 11:55:32: SGD: Saving checkpoint model 'F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/models/cntkSpeech.dnn'
08/05/2016 11:55:32: CNTKCommandTrainEnd: speechTrain

08/05/2016 11:55:32: Action "train" complete.


08/05/2016 11:55:32: ##############################################################################
08/05/2016 11:55:32: #                                                                            #
08/05/2016 11:55:32: # Action "write"                                                             #
08/05/2016 11:55:32: #                                                                            #
08/05/2016 11:55:32: ##############################################################################

reading script file glob_0000.write.scp ... 10 entries

Post-processing network...

7 roots:
	CrossEntropyWithSoftmax = CrossEntropyWithSoftmax()
	EvalErrorPrediction = ErrorPrediction()
	InvStdOfFeatures = InvStdDev()
	MeanOfFeatures = Mean()
	PosteriorProb = Softmax()
	Prior = Mean()
	ScaledLogLikelihood = Minus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [132 x *1]
Validating --> W2 = LearnableParameter() :  -> [132 x 512]
Validating --> W1 = LearnableParameter() :  -> [512 x 512]
Validating --> W0 = LearnableParameter() :  -> [512 x 363]
Validating --> features = InputValue() :  -> [363 x *1]
Validating --> MeanOfFeatures = Mean (features) : [363 x *1] -> [363]
Validating --> InvStdOfFeatures = InvStdDev (features) : [363 x *1] -> [363]
Validating --> MVNormalizedFeatures = PerDimMeanVarNormalization (features, MeanOfFeatures, InvStdOfFeatures) : [363 x *1], [363], [363] -> [363 x *1]
Validating --> W0*features = Times (W0, MVNormalizedFeatures) : [512 x 363], [363 x *1] -> [512 x *1]
Validating --> B0 = LearnableParameter() :  -> [512 x 1]
Validating --> W0*features+B0 = Plus (W0*features, B0) : [512 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H1 = Sigmoid (W0*features+B0) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W1*H1 = Times (W1, H1) : [512 x 512], [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> B1 = LearnableParameter() :  -> [512 x 1]
Validating --> W1*H1+B1 = Plus (W1*H1, B1) : [512 x 1 x *1], [512 x 1] -> [512 x 1 x *1]
Validating --> H2 = Sigmoid (W1*H1+B1) : [512 x 1 x *1] -> [512 x 1 x *1]
Validating --> W2*H1 = Times (W2, H2) : [132 x 512], [512 x 1 x *1] -> [132 x 1 x *1]
Validating --> B2 = LearnableParameter() :  -> [132 x 1]
Validating --> HLast = Plus (W2*H1, B2) : [132 x 1 x *1], [132 x 1] -> [132 x 1 x *1]
Validating --> CrossEntropyWithSoftmax = CrossEntropyWithSoftmax (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> EvalErrorPrediction = ErrorPrediction (labels, HLast) : [132 x *1], [132 x 1 x *1] -> [1]
Validating --> PosteriorProb = Softmax (HLast) : [132 x 1 x *1] -> [132 x 1 x *1]
Validating --> Prior = Mean (labels) : [132 x *1] -> [132]
Validating --> LogOfPrior = Log (Prior) : [132] -> [132]
Validating --> ScaledLogLikelihood = Minus (HLast, LogOfPrior) : [132 x 1 x *1], [132] -> [132 x 1 x *1]

Validating network. 17 nodes to process in pass 2.


Validating network, final pass.



12 out of 25 nodes do not share the minibatch layout with the input data.

Post-processing network complete.



Allocating matrices for forward and/or backward propagation.

Memory Sharing Structure:

0000000000000000: {[B0 Gradient[512 x 1]] [B1 Gradient[512 x 1]] [B2 Gradient[132 x 1]] [CrossEntropyWithSoftmax Gradient[1]] [CrossEntropyWithSoftmax Value[1]] [EvalErrorPrediction Gradient[1]] [EvalErrorPrediction Value[1]] [H1 Gradient[512 x 1 x *1]] [H2 Gradient[512 x 1 x *1]] [HLast Gradient[132 x 1 x *1]] [InvStdOfFeatures Gradient[363]] [LogOfPrior Gradient[132]] [MVNormalizedFeatures Gradient[363 x *1]] [MeanOfFeatures Gradient[363]] [PosteriorProb Gradient[132 x 1 x *1]] [PosteriorProb Value[132 x 1 x *1]] [Prior Gradient[132]] [ScaledLogLikelihood Gradient[132 x 1 x *1]] [W0 Gradient[512 x 363]] [W0*features Gradient[512 x *1]] [W0*features+B0 Gradient[512 x 1 x *1]] [W1 Gradient[512 x 512]] [W1*H1 Gradient[512 x 1 x *1]] [W1*H1+B1 Gradient[512 x 1 x *1]] [W2 Gradient[132 x 512]] [W2*H1 Gradient[132 x 1 x *1]] [features Gradient[363 x *1]] [labels Gradient[132 x *1]] }
0000023AE5F4DD90: {[LogOfPrior Value[132]] }
0000023AE5F4DE30: {[H2 Value[512 x 1 x *1]] [HLast Value[132 x 1 x *1]] [MVNormalizedFeatures Value[363 x *1]] [W0*features+B0 Value[512 x 1 x *1]] [W1*H1 Value[512 x 1 x *1]] }
0000023AE5F4DED0: {[H1 Value[512 x 1 x *1]] [W0*features Value[512 x *1]] [W1*H1+B1 Value[512 x 1 x *1]] [W2*H1 Value[132 x 1 x *1]] }
0000023AE5F4E290: {[ScaledLogLikelihood Value[132 x 1 x *1]] }
0000023AEA680EF0: {[W1 Value[512 x 512]] }
0000023AEA680F90: {[W2 Value[132 x 512]] }
0000023AEA681030: {[Prior Value[132]] }
0000023AEA681490: {[features Value[363 x *1]] }
0000023AEA6815D0: {[W0 Value[512 x 363]] }
0000023AEA681990: {[MeanOfFeatures Value[363]] }
0000023AEA681B70: {[B1 Value[512 x 1]] }
0000023AEA681CB0: {[B0 Value[512 x 1]] }
0000023AEA682070: {[InvStdOfFeatures Value[363]] }
0000023AEA6822F0: {[labels Value[132 x *1]] }
0000023AEA6827F0: {[B2 Value[132 x 1]] }

evaluate: reading 368 frames of An4/71/71/cen5-fjam-b.mfc
Minibatch[0]: ActualMBSize = 368
evaluate: reading 438 frames of An4/213/213/cen4-fsaf2-b.mfc
Minibatch[1]: ActualMBSize = 438
evaluate: reading 368 frames of An4/513/513/cen7-mgah-b.mfc
Minibatch[2]: ActualMBSize = 368
evaluate: reading 248 frames of An4/614/614/cen7-mkdb-b.mfc
Minibatch[3]: ActualMBSize = 248
evaluate: reading 248 frames of An4/507/507/cen1-mgah-b.mfc
Minibatch[4]: ActualMBSize = 248
evaluate: reading 358 frames of An4/693/693/cen8-mmkw-b.mfc
Minibatch[5]: ActualMBSize = 358
evaluate: reading 308 frames of An4/918/918/cen4-mtos-b.mfc
Minibatch[6]: ActualMBSize = 308
evaluate: reading 608 frames of An4/477/477/an257-mewl-b.mfc
Minibatch[7]: ActualMBSize = 608
evaluate: reading 78 frames of An4/454/454/an70-meht-b.mfc
Minibatch[8]: ActualMBSize = 78
evaluate: reading 228 frames of An4/254/254/cen6-ftmj-b.mfc
Minibatch[9]: ActualMBSize = 228
Written to F:\cygwin64\tmp\cntk-test-20160805125518.368563\Speech\DNN_WriteCommand@release_cpu/Output*
Total Samples Evaluated = 3250

08/05/2016 11:55:33: Action "write" complete.

08/05/2016 11:55:33: __COMPLETED__
Error: Output of write command does not match baseline output within specified tolerance. See /tmp/cntk-test-20160805125518.368563/Speech/DNN_WriteCommand@release_cpu/Output.ScaledLogLikelihood.diff
